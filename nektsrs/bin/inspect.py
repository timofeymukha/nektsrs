from nektsrs.io.header import Header
import glob
from os.path import join
import argparse
import numpy as np


def main():
    parser = argparse.ArgumentParser(
        description="A utility inspecting the headers of \
                            pts files generated by the KTH framework\
                            timeseries module."
    )

    parser.add_argument(
        "--basename",
        type=str,
        help="The base string, which follows pts in the file names",
        required=True,
    )

    args = parser.parse_args()

    basename = args.basename

    search_string = join("pts" + basename + "[0-1].f[0-9][0-9][0-9][0-9][0-9]")
    datafiles = glob.glob(search_string)
    print(f"Found {len(datafiles)} datafiles")
    if len(datafiles) == 0:
        raise FileExistsError("Could not find any data!")

    datafiles.sort()

    headers = np.array([Header(i) for i in datafiles])
    ldim = np.array([h.ldim for h in headers])
    npoints = np.array([h.npoints for h in headers])
    nt = np.array([h.nt for h in headers])
    nfields = np.array([h.nfields for h in headers])
    time = np.array([h.time for h in headers])

    for i in range(len(datafiles)):
        print(i, time[i], nt[i])

    print("Information follows in the format: min, max, (mean)")
    print("\t Write time", np.min(time), np.max(time))
    print(
        "\t Number of points",
        np.min(npoints),
        np.max(npoints),
        np.mean(npoints),
    )
    print(
        "\t Number of fields",
        np.min(nfields),
        np.max(nfields),
        np.mean(nfields),
    )
    print("\t Number of timesteps", np.min(nt), np.max(nt), np.mean(nt))
    print("\t Number of dims", np.min(ldim), np.max(ldim), np.mean(ldim))


if __name__ == "__main__":
    main()
